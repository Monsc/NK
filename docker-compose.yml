version: '3.8'

services:
  # 主应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - UPSTASH_REDIS_REST_URL=redis://redis:6379
      - UPSTASH_REDIS_REST_TOKEN=${UPSTASH_REDIS_REST_TOKEN}
      - LLM_API_KEY=${LLM_API_KEY}
      - NOTION_API_KEY=${NOTION_API_KEY}
      - NOWPAYMENTS_API_KEY=${NOWPAYMENTS_API_KEY}
      - GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app-network

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network

  # 日志收集 - Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-1
    volumes:
      - ./monitoring/fluentd/conf:/fluentd/etc:ro
      - ./logs:/fluentd/log
    environment:
      - FLUENTD_CONF=fluent.conf
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  # 备份服务
  backup:
    image: alpine:latest
    volumes:
      - redis-data:/data/redis:ro
      - ./backups:/backups
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: |
      sh -c '
        while true; do
          echo "Creating backup at $$(date)"
          redis-cli -h redis -a $$REDIS_PASSWORD --rdb /data/redis/dump.rdb
          cp /data/redis/dump.rdb /backups/redis-backup-$$(date +%Y%m%d-%H%M%S).rdb
          find /backups -name "redis-backup-*.rdb" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
